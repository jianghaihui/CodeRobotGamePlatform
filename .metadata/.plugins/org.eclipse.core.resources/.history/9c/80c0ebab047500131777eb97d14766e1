package com.crgp.game.client;

import java.io.InputStream;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

import com.crgp.game.client.message.DataMessage;
import com.crgp.game.client.message.Message;

public class Client {
	public static final String SEND = "SEND";
	public static final String RECEIVE = "RECEIVE";

	public static final String IP = "127.0.0.1";
	public static final int PORT = 15000;

	private static Socket sendClient;
	private static Socket callbackClient;

	private static Map<String, Action> actionMap = new HashMap<String, Action>();

	private static Socket getSendClient() throws Exception {
		if (sendClient == null) {
			try {
				sendClient = new Socket(IP, PORT);
				sendClient.setKeepAlive(true);

				// 握手
				sendClient.getOutputStream().write(SEND.getBytes());
			} catch (Exception e) {
				throw new Exception("通讯服务客户端错误！");
			}
		}
		return sendClient;
	}

	private static Socket getCallBackClient() throws Exception {
		if (callbackClient == null) {
			try {
				callbackClient = new Socket(IP, PORT);
				callbackClient.setKeepAlive(true);

				// 握手
				callbackClient.getOutputStream().write(RECEIVE.getBytes());
			} catch (Exception e) {
				throw new Exception("通讯服务客户端错误！");
			}
		}
		return callbackClient;
	}

	public static void registAction(String name, Action action) {
		actionMap.put(name, action);
	}

	public static DataMessage send(Message message) {
		try {
			getSendClient().getOutputStream().write(
					message.getMessage().getBytes());
			if (message.hasReceipt()) {
				InputStream is = getSendClient().getInputStream();

				byte[] b = new byte[1024];
				is.read(b);
				return new DataMessage(new String(b));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	class CallBackLoopper implements Runnable {
		@Override
		public void run() {
			InputStream is = null;
			try {
				is = getCallBackClient().getInputStream();
			} catch (Exception e) {
				e.printStackTrace();
			}
			while (true) {

				byte[] b = new byte[1024];
				try {
					int offset = is.read(b);

					Thread.sleep(10);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}
}
