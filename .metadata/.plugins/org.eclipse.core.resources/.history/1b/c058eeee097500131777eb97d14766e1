package com.xjiang.mine.game;

import java.util.Map;

import javax.swing.JPanel;

import com.crgp.game.BaseGame;
import com.xjiang.mine.game.ui.MineView;

@SuppressWarnings("deprecation")
public class MineGame extends BaseGame {
	private MineView view;

	private Thread mainThread;

	private boolean isRun = false;
	private boolean isEnd = false;

	private String robot;

	@Override
	public String getName() {
		return "扫雷";
	}

	@Override
	public String getUID() {
		return "CRGP-Mine-Game";
	}

	@Override
	public final int playerCount() {
		return 1;
	}

	@Override
	public final JPanel createView() {
		view = new MineView();
		view.init();
		return view;
	}

	@Override
	public final void launch(Map<String, String> params) {
		robot = robots[0];

		isEnd = false;
		view.init();
		view.repaint();

		if (robot == null) {
			view.initEvent();
		}
	}

	@Override
	public final void run(final long space, final long step) {
		if (robot != null) {
			mainThread = new Thread(new Runnable() {

				@Override
				public void run() {
					while (true) {
						if (view.isSucceed() || view.isFail()) {
							isEnd = true;
							isRun = false;
							break;
						}

						final Thread robotThread = new Thread(new Runnable() {
							@Override
							public void run() {
								isRun = true;
								play(robot, 0);
								isRun = false;
							}
						});

						// 监控线程,等待一个单步时间,如果机器人没有在单步时间内结束,则强制结束机器人线程
						final Thread controlThread = new Thread(new Runnable() {
							@Override
							public void run() {
								try {
									Thread.sleep(step);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
								if (robotThread.isAlive()) {
									System.out.println("Stop");
									robotThread.stop();
									isRun = false;
								}
							}
						});

						robotThread.start();
						controlThread.start();

						// 等待上一次机器人代码执行结束
						while (isRun) {
							try {
								Thread.sleep(0);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						// 等待一个命令间隔
						try {
							Thread.sleep(space);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			});

			mainThread.start();
		}
	}

	@Override
	public final void runOne() {
		if (robot != null) {
			if (view.isSucceed() || view.isFail()) {
				isEnd = true;
			}
			isRun = true;
			play(0);
			isRun = false;
		}
	}

	@Override
	public final boolean isEnd() {
		return isEnd;
	}

	// -------------------------
	// ---
	// ---信号与槽(Signal and Slots)
	// ---
	// -------------------------

	/**
	 * [SLOT]获取宽度
	 * 
	 * @return
	 */
	public final int getWidth() {
		return view.getX_size();
	}

	/**
	 * [SLOT]获取高度
	 * 
	 * @return
	 */
	public final int getHeight() {
		return view.getY_size();
	}

	/**
	 * [SLOT]获取地雷数量
	 * 
	 * @return
	 */
	public final int getMineCount() {
		return view.getMine_size();
	}

	/**
	 * [SLOT]点击一个雷点
	 * 
	 * @param x
	 *            横向位置
	 * @param y
	 *            纵向位置
	 */
	public final void click(int x, int y) {
		view.click(x, y);

		isRun = false;

		view.repaint();

		Thread.currentThread().stop();

		try {
			Thread.sleep(1);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}

	/**
	 * [SLOT]获取所有位置的信息，以二维数组的形式返回
	 * 
	 * @return -1:未知,0-N:该位置的值
	 */
	public final int[][] getMap() {
		return view.getMap();
	}
}
