package com.crgp.game.client;

import java.io.InputStream;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

import com.crgp.game.client.message.ActionMessage;
import com.crgp.game.client.message.DataMessage;
import com.crgp.game.client.message.Message;

public class Client {
	public static final String SEND = "SEND";
	public static final String RECEIVE = "RECEIVE";

	public static final String IP = "127.0.0.1";
	public static final int PORT = 15000;

	private Socket sendClient;
	private Socket callbackClient;

	private Map<String, Action> actionMap = new HashMap<String, Action>();

	private final String UID;

	public Client(String UID) throws Exception {
		this.UID = UID;

		try {
			sendClient = new Socket(IP, PORT);
			sendClient.setKeepAlive(true);

			// 握手
			sendClient.getOutputStream().write((SEND + ":" + UID).getBytes());
		} catch (Exception e) {
			throw new Exception("通讯服务客户端错误！");
		}

		try {
			callbackClient = new Socket(IP, PORT);
			callbackClient.setKeepAlive(true);

			// 握手
			callbackClient.getOutputStream().write(
					(RECEIVE + ":" + UID).getBytes());

			new Thread(new CallBackLoopper()).start();
		} catch (Exception e) {
			throw new Exception("通讯服务客户端错误！");
		}
	}

	public void registAction(String name, Action action) {
		actionMap.put(name, action);
	}

	public DataMessage send(Message message) {
		try {
			sendClient.getOutputStream().write(message.getMessage().getBytes());
			sendClient.getOutputStream().flush();
			if (message.hasReceipt()) {
				InputStream is = callbackClient.getInputStream();

				byte[] b = new byte[1024];
				is.read(b);
				return (DataMessage) Message.createmessage(new String(b));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	class CallBackLoopper implements Runnable {
		@Override
		public void run() {
			try {
				InputStream is = callbackClient.getInputStream();
				while (true) {

					byte[] b = new byte[1024];
					is.read(b);

					ActionMessage actionMessage = (ActionMessage) Message
							.createmessage(new String(b));
					Action action = actionMap
							.get(actionMessage.getActionName());
					Map<String, String> result = action.execute(actionMessage);
					if (actionMessage.hasReceipt()) {
						DataMessage dataMessage = new DataMessage(actionMessage
								.getTargetType(), actionMessage.getTargetId(),
								actionMessage.getSourceType(), actionMessage
										.getSourceId());
						dataMessage.setDatas(result);

						sendClient.getOutputStream().write(
								dataMessage.getMessage().getBytes());
						sendClient.getOutputStream().flush();
					}

					Thread.sleep(10);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}
